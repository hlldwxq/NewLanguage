Type:
	int1(bool)   int8   int16   int32   int64   int128
	Type*   ( int8*  and  int8** )   // pointer 


Variable declaration:   //the default value of integer and double is 0 or 0.0, the default value of array is also 0
	int8 a [= 5]

	int8* p      null //add null
	int8* p = &a (a is variable name)  //nessary or not??
	int8* dArray = new int8 [n]  (dynamic array, using malloc, same to the C++, n is an expression)
	delete dArray    // release the space

LeftValue
	variableName           // name of a variable
                p[1]      // equals to *(p+1)

Expression
	6	//constant number
	LeftValue
	true  false 
	null
	f( expression1, expression2, ...)	//function call, could be no parameter
	

	arithmetic operations:   + - * /
		pointer operation:
		      p1 - p2
		no pointer:		
		      -a      a+b      a-b      a*b       a/b      (a+b)*c
		      // the type of a and b could be different, but they must be number
		      // But the type of result must be the one with the largest range
		      // for example, int8 + int64 -> int64     int + double -> double


   	comparison:   ==  !=  <  >  <= >=
		      expression1 == expression2
		      //  the type of expression1 and expression2 could be different
	boolean operations: 
		      !a     a&b    c | 0   //a,b,c need to be expression 
				 // the type of a,b,c need to be int1 
	bo10 & bo11	       

Commands:
	Types Identifier [= expression]
	leftvalue = expression
	return expression       //return could be not the last command in a block
	f(expression1, expression2, ..)  (could be no parameter)
	
	{  [Command]*  }      //block, could be empty
	
	if  condition
	then Commands
	[ else Commands ]     	

	for start, condition, step  Commands
	// start is an integer variable declaration, such as   int8 a = 9 or int64 b
	// step is a constant integer 

	while condition cmd

	break

Structure:
	Variable declaration   // gloable variable
	def Type|void functionName ( [Type parameterName , ]* ) Commands   //function def
	def Type|void functionName ( [Type parameterName]* ); //function decl

example:

----Find the max number in an array

def int64 FindMaxNum( int64[] arr ){
     int64 maxNum = arr[0]

     for int64 i=1 , i < arr.size, 1 {
            if arr[i] > maxNum
            then  maxNum = arr[i]
      }

     return maxNum
}

----Find the max number in an Two-dimension array

def int64 FindMaxNum2( int64[][] arr ){
     int64 maxNum = arr[0][0]

     for int64 i , i < arr.size, 1 {   //default value of i and j is 0
           
           for int64 j, i<arr[].size, 1{
	if arr[i][j] > maxNum 
	then maxNum = arr[i][j]
           }
     }

     return maxNum
}


----Find numbers that appear in both arrays
def int1 hasNum (int64* arr, int64 a, int64 index){

     for int64 i, i<index, 1 {
           if a==arr[i]
           then return 1    
     }

     return 0
}

def int64* FindCommonNum (  int64[] arr1, int64[] arr2 ){

      int64 initSize

      if arr1.size < arr2.size
      then initsize = arr1.size
      else initsize = arr2.size

      int64* common = new int64 [initSize]
      int64 index
      for int64 i, i<arr1.size, 1 {
             for int64 j, j<arr2.size, 1{
	    if (arr1[i] == arr2[j]) & (hasNum(common, arr1[i],index))
	    then {
	            *(common+index) = arr1[i]
	            index = index+1
	    }
             }
      }

      int64* result = new int64 [index]
      for int64 i , i<index , 1{
             result[i] = common[i]
      }

     delete common
     return result
}







