#!/bin/bash



LLVMIR=./llvmir
LLVMAS=llvm-as-10
CLANG=clang-10

function fail() {
  echo "ERROR: $BASENAME ($CFGNAME): $1"
  echo "Logfile: $LOGFILE"
  exit 1
}

# prepare <qfile>, expects $FLAGS, $CFGNAME to be set
function prepare() {
  QFILE="$1"

  BASENAME="${QFILE%.q}"
  STEM=${BASENAME##*/}
  DIRNAME="${BASENAME%/*}"

  OUTDIR=$DIRNAME/out
  OUTBASE=$OUTDIR/$STEM.$CFGNAME
  mkdir -p "$OUTDIR"

  echo -n "Testing $BASENAME ($CFGNAME), flags $FLAGS: "

  # Input files
  # QFILE
  CFILE="$BASENAME.c"

  # Output files
  LLFILE="$OUTBASE.ll"
  OUTFILE="$OUTBASE.out"
  LOGFILE="$OUTBASE.log"

  rm -rf $LLFILE $OUTFILE $LOGFILE
}

function check_expect(){
  REGEXP="$(grep '^ *# EXPECT ' $QFILE | sed -re 's/^ *# EXPECT //')"
  if test ! "$REGEXP"; then fail "No # EXPECT in $QFILE"; return; fi
}

function compile() {
  $LLVMIR $FLAGS $QFILE > $LLFILE 2>$LOGFILE || fail "Compilation error"

  $LLVMAS -disable-output $LLFILE 1>$LOGFILE 2>&1 || fail "Invalid llvm text generated by compiler"
  $CLANG -O2 -Wall -Wextra --rtlib=compiler-rt -g -o "$OUTFILE" "$CFILE" "$LLFILE" 1>$LOGFILE 2>&1 || fail "Clang compilation error"
}

function run_test() {
  ./"$OUTFILE" > "$LOGFILE" 2>&1
}

function check_expect_error(){
  grep -q "$REGEXP" "$LOGFILE" || fail "unexpected exception"
  echo "Success!"
}

function do_test() {
  prepare $1
  check_expect
  compile
  run_test
  check_expect_error
}

function flag_afg(){
  CFGNAME=$1
  shift
  FLAGS="$@"
}

function do_tests() {

  CFGNAME=$1
  shift
  FLAGS="$@"
  for i in tests/dynamicCheck/*.q; do
    do_test $i
  done

}

function do_tests_free() {
  CFGNAME=$1
  shift
  FLAGS="$@"
  for i in tests/dynamicCheck/freeCheck/*.q; do
    do_test $i
  done

}

function do_tests_arith() {
  CFGNAME=$1
  shift
  FLAGS="$@"

  for i in tests/dynamicCheck/arith/*.q; do
    do_test $i
  done

}

function do_tests_array() {
  CFGNAME=$1
  shift
  FLAGS="$@"

  for i in tests/dynamicCheck/arrayBound/*.q; do
    do_test $i
  done

}

 do_tests dy DyCheck
 do_tests arith_array_free check_arith check_free	check_array_bound

 do_tests_arith arith check_arith
 do_tests_arith arith_array check_arith check_array_bound
 do_tests_arith arith_array check_arith check_free

 do_tests_array array check_array_bound
 do_tests_array arith_array check_arith check_array_bound
 do_tests_array free_array check_free	check_array_bound

 do_tests_free free check_free
 do_tests_free free_array check_free check_array_bound
 do_tests_free free_arith check_free check_arith
