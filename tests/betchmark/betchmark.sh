#!/bin/bash

set -e  # Terminate on errors

LLVMIR=./llvmir
LLVMAS=llvm-as-10
CLANG=clang++-10

function fail() {
  echo "ERROR: $BASENAME ($CFGNAME): $1"
  echo "Logfile: $LOGFILE"
  exit 1
}

# prepare <qfile>, expects $FLAGS, $CFGNAME to be set
function prepare() {
  QFILE="$1"

  BASENAME="${QFILE%.q}"
  STEM=${BASENAME##*/}
  DIRNAME="${BASENAME%/*}"

  OUTDIR=$DIRNAME/out
  OUTBASE=$OUTDIR/$STEM.$CFGNAME
  mkdir -p "$OUTDIR"

  echo -n "Testing $BASENAME ($CFGNAME), flags $FLAGS: "
  echo ""

  # Input files
  # QFILE
  CFILE="$BASENAME.cpp"

  # Output files
  LLFILE="$OUTBASE.ll"
  OUTFILE="$LLFILE.out"
  LOGFILE="$LLFILE.log"

  SFILE="$OUTBASE.opt.ll"
  OUTOPTFILE="$SFILE.out"
  LOGOPTFILE="$SFILE.log"

  CPP="cpp"
  Q="q"

  rm -rf $LLFILE $OUTFILE $LOGFILE
}

function run(){

    # do test first
    echo "$BASENAME $CFGNAME test"
    ./"$OUTFILE" > "$LOGFILE" 2>&1 || fail "Running test failed"

    echo "$BASENAME $CFGNAME run cpp/c code"
    for i in $(seq 1 5) 
    do
        ./"$OUTFILE" "$CPP"
    done

    echo "$BASENAME $CFGNAME run not opt q code"
    for i in $(seq 1 5) 
    do
        ./"$OUTFILE" "$Q"
    done

    echo "$BASENAME $CFGNAME run opt q code"
    for i in $(seq 1 5) 
    do
        ./"$OUTOPTFILE" "$Q"
    done
}

function compile() {
  $LLVMIR $FLAGS $QFILE > $LLFILE 2>$LOGFILE || fail "Compilation error"

  $LLVMAS -disable-output $LLFILE 1>$LOGFILE 2>&1 || fail "Invalid llvm text generated by compiler"
  $CLANG -O2 -o "$OUTFILE" "$CFILE" "$LLFILE" 1>$LOGFILE 2>&1 || fail "Clang compilation error"

  opt-10 -S -O3 "$LLFILE">"$SFILE"
  $CLANG -O2 -o "$OUTOPTFILE" "$CFILE" "$SFILE" 1>$LOGOPTFILE 2>&1 || fail "Clang opt compilation error"

}

function do_test() {
  prepare $1
  compile
  run
}

function do_tests() {
  if [ $# -eq 2 ];
  then
      FLAGS=$1
      CFGNAME=$2
  elif [ $# -eq 3 ];
  then
      FLAGS="$1 $2"
      CFGNAME=$3
  else
      FLAGS="$1 $2 $3"
      CFGNAME=$4
  fi

  for i in tests/betchmark/*.q; do
    do_test $i
  done

}

do_tests DyCheck dy
do_tests notDyCheck ndy

do_tests check_arith arith
do_tests check_array_bound array
do_tests check_free free

do_tests check_arith check_array_bound arith_array
do_tests check_free	check_array_bound free_array
do_tests check_free	check_arith free_arith

do_tests check_arith check_free	check_array_bound arith_array_free
