# July 31

Thesis outline.
  Abstract: short summary, 1 paragraph

  ### Chapter Background and Theory
  1. Introduction:
    add: why is topic important.

    Background:
      also mention newer developments, e.g., Rust. They are designed to solve similar problems!
      https://en.wikipedia.org/wiki/Rust_(programming_language)


    Intro to languages: briefly discuss 'relevant' aspects of
    Java, Rust, C. How do they tackle safety, platform indep?
    What are the ADVANTAGES/DISADVANTAGES. (Neutral discussion, no opinion yet!)

  ### Chapter The Q-Language and its Compiler
  2. the feature and syntax of Q language
    Language syntax and semantics
    (Optional) dynamic checks. From user point of view.
    What is checked, what guarantees are implied by these checks?
      e.g. no undefined behavior, but defined abort.


  3. Frontend
    * general structure of compilers (e.g. parser, AST, codegen, backend) [use some compiler textbook and take their structuring!]
    * your implementation of frontend. LL-grammar, rec-parser, symtab, AST

  4. LLVM --> May go to Chapter Background
    * used for backend
    * general intro to LLVM

  5. Backend
    * description of your backend.
    * how are checks implemented


  ### Chapter Evaluation
    6. Unit and Regression testing
      * general intro: what is unit/regression testing --> May go to Chapter Background
      * what did you do: Test framework for your compiler

    7. Performance
      * Sorting algorithms + other algos?, compare performance with C, Java (maybe Rust?)

  ### Conclusions
    * concl + achievements
    * future work

  Bibliography



# July 24

Qiao implemented flags, completed introsort, heapsort, strings
together: tried parallel tests, fixed introsort, benchmark introsort against std::sort

TODO
  * why is q-algo still slower, even without dyn-checks?
    * inlining? Do not spend too much time on it!

  * systematic benchmarks: compare runtimes with different combinations of flags, against C++
    * make sure no background processes on computer while measuring
    * repeat experiment a few times, take median
    * automate via script!

  * Benchmark introsort, heapsort (against C++ heapsort)

  * Are there other interesting algorithms you want to implement?

  * Compare with Java? (Careful to compare SAME algorithms, e.g. java sorting uses some mergesort by default)

  Thesis writing:
    * start with outline: chapters, a few sentences for each chapter what it contains



# July 17+July20
Qiao completed implemented IntConst stuff, fixed bugs

Together:
  adjusted validtest script
  quicksort
  fixed invalid backjump bug in while/for loops
  fixed return void parser bug (void would not be consumed)


TODO:
  DONE add regression tests:
    complex conditions in while/for loops -> Bug with invalid back-jump
    return void

  DONE enable array-bounds and use-after-free based on flag/config option
  DONE more fine grained flags, e.g.
    arith-checks: detect overflow on arith operations, e.g., 127+3 (sint8), 5/0, ...
    array-bound-checks: detect array index out of bounds
    free-checks: detect use after free, double-free

  DONE string type, string literals

  some error message do not have line number(because the error() of parser)

  meaningful tests, ideally:
    * can be benchmarked against real-world impls
    * use all relevant features: arith, array-access, memory-alloc/free

  ideas:
    sorting algorithm, e.g.
      heapsort -> has impl in GNU libstdc++  (std::make_heap, std::sort_heap)
      introsort -> has impl in GNU libstdc++ (std::sort)
      mergesort -> has impl in GNU libstdc++ (std:stable_sort)


# July 10

Qiao implemented array-bounds and use-after-free check

Together: replaced const-impl with strings by IntConst

TODO:
  DONE debug IntConst and stuff (tests fail)
  enable array-bounds and use-after-free based on flag/config option



# June 26

div constant calculate
andT  orT

Free function.

overflow checks for memory
  * array bounds checks (also optional)


TODOs:


  DONE Fix Overflow in compiler constant propagation
    (- maybe use GMP library)
    - does LLVM provide functions to compute with large numbers?
      -> llvm/ADT/APInt.h

  DONE Fix Overflow in number parser
    - must parse arbitrarily large numbers

  DONE Add Overflow check for uminus:
    sint8 x=-128
    sint8 y = -x # OVERFLOW

  DONE Free function.

  DONE(not optional yet) overflow checks for memory
    * array bounds checks (also optional)


  ** At this point, we might have reached minimal viable product
  ** What next?

  literature review on programming languages (important for final report):
    How does this project relate to others? To design ideas for PLs?
    What would be useful features to add at this point?
    -> possible starting points:
      textbook on PLs,
      modern PL, e.g. Rust, Java, Go, ...

  print function
    would make language self-contained enough for tests!
    requires: string type
    "easy" way: string = uint8*, and 'hardcode' printf with variable arguments (printf-command)
      printf("foo %s %l", x,y)

  implement a larger program, ideally
    * does something useful
    * is safety critical
    * has suffered form overflow problems in the past

  add more advanced features (?):
    * struct type
    * polymorphic types (templates) "vector<T>"



  Avoid repeated global string data for error messages.
    -> gets removed by compiler anyway.

  Should overflow-check also return result of computation?
    -> currently, result is computed twice
    -> ad-hoc test on x86 and add revealed: optimizer removes superfluous addition!






-------

  what do we have:
    - structure: functions, global vars
    - control flow: while, break, for, if
    - operations: malloc (with ovf check)
    - arith: +,-,*,/, (optional overflow check), uminus (no ovf check yet)
    - bitwise: &, |, ! (all bit sizes, and signs)
    - compare: <, <=, >, >=,

  Tests: lots of tests
